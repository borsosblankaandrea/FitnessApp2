@page "/usermemberships"
@attribute [Authorize(Roles = "admin")]
@using FitnessAppAPI.Models
@using FitnessAppAPI.Services
@inject UserMembershipsService userMembershipsService
@inject UsersService usersService
@inject MembershipsService membershipsService

<h1>Felhasználói bérletek</h1>

<div class="row mb-3" style="width: 65%;">
    <div class="col">
        <input type="text" class="form-control" placeholder="Név keresése" @bind="nameFilter" />
    </div>
    <div class="col">
        <input type="text" class="form-control" placeholder="CNP keresése" @bind="cnpFilter" />
    </div>
</div>

@if (userMemberships != null && userMemberships.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Név</th>
                <th>CNP</th>
                <th>Bérlet megnevezése</th>
                <th>Előfizetés dátuma</th>
                <th>Bejelentkezés számláló</th>
                <th>Aktív</th>
                <th>Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userMembership in userMemberships.Where(u => string.IsNullOrWhiteSpace(nameFilter) || u.name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase))
           .Where(u => string.IsNullOrWhiteSpace(cnpFilter) || u.CNP.Contains(cnpFilter, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>@userMembership._id</td>
                    <td>@userMembership.name</td>
                    <td>@userMembership.CNP</td>
                    <td>@userMembership.megnevezes</td>
                    <td>@userMembership.purchase_date.ToString("yyyy-MM-dd")</td>
                    <td>@userMembership.checkin_count</td>
                    <td>@(userMembership.active == true ? "Aktív" : "Inaktív")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteUserMembership(userMembership._id)">Törlés</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

<h3>Új felhasználói bérlet hozzáadása</h3>
<div class="mb-3" style="width: 25%">
    <label for="cnpSearch" class="form-label">CNP keresése:</label>
    <div class="input-group mb-3">
        <input type="text" id="cnpSearch" class="form-control" @bind="searchCNP" />
        <button class="btn btn-primary" @onclick="SearchUserByCNP">Keresés</button>
    </div>

    
</div>

<div class="mb-3" style="width: 25%">
    <label for="userName" class="form-label">Felhasználó neve:</label>
    <input type="text" id="userName" class="form-control" value="@selectedUser?.name" disabled />
</div>
<div class="mb-3" style="width: 25%">
    <label for="membershipSelect" class="form-label">Bérlet kiválasztása:</label>
    <select id="membershipSelect" class="form-select" @bind="selectedMembershipId">
        <option disabled selected>Select membership</option>
        @if (memberships != null && memberships.Any())
        {
            @foreach (var membership in memberships)
            {
                <option value="@membership._id">@membership.megnevezes</option>
            }
        }
        else
        {
            <option disabled>Loading memberships...</option>
        }
    </select>
</div>
<button class="btn btn-primary" @onclick="AddUserMembership">Hozzáadás</button>

<br />
<br />

@code {
    List<UserMemberships> userMemberships;
    List<Memberships> memberships;
    Users? selectedUser;
    string searchCNP;
    string selectedMembershipId;

    string nameFilter = "";
    string cnpFilter = "";

    protected override async Task OnInitializedAsync()
    {
        
            userMemberships = await userMembershipsService.GetAllEntries();
            memberships = await membershipsService.GetAllMemberships();
            await userMembershipsService.CheckExpirationDate();
       
    }

    private async Task DeleteUserMembership(string userMembershipId)
    {
        try
        {
            await userMembershipsService.RemoveEntry(userMembershipId);
            await RefreshUserMemberships();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hiba a törléskor: {ex.Message}");
        }
    }

    private async Task RefreshUserMemberships()
    {
        try
        {
            userMemberships = await userMembershipsService.GetAllEntries();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hiba a frissítéskor: {ex.Message}");
        }
    }

    private async Task SearchUserByCNP()
    {
        if (!string.IsNullOrWhiteSpace(searchCNP))
        {
            try
            {
                selectedUser = await usersService.GetEntryByCnp(searchCNP);
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Hiba a CNP alapú kereséskor: {ex.Message}");
                selectedUser = null;
            }
        }
        else
        {
            selectedUser = null;
        }
    }


    private async Task AddUserMembership()
    {
        if (selectedUser != null && !string.IsNullOrWhiteSpace(selectedMembershipId))
        {
            try
            {
                var selectedMembership = memberships?.FirstOrDefault(m => m._id == selectedMembershipId);
                if (selectedMembership != null)
                {
                    var newUserMembership = new UserMemberships
                        {
                            user_id = selectedUser._id,
                            name = selectedUser.name,
                            CNP = selectedUser.CNP,
                            membership_id = selectedMembership._id,
                            megnevezes = selectedMembership.megnevezes
                        };

                    
                    await userMembershipsService.CreateEntry(newUserMembership);
                    selectedUser = null;
                    searchCNP = string.Empty;
                    selectedMembershipId = string.Empty;
                    await RefreshUserMemberships();
                }
                else
                {
                    Console.WriteLine("A bérlet nem található.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Hiba: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("A felhasználó vagy bérlet null.");
            
        }
    }
}
