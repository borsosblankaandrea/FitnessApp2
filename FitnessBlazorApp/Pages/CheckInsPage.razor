@page "/checkins"
@attribute [Authorize(Roles = "admin")]
@using FitnessAppAPI.Models
@using FitnessAppAPI.Services
@inject CheckInsService checkInsService
@inject UserMembershipsService userMembershipsService


<h1>Bejelentkezések</h1>

<h3>Bejelentkezés</h3>
<div class="mb-3" style="width: 25%">
    <label for="userMembershipId" class="form-label">User Membership ID:</label>
    <div class="input-group mb-3">
		<input type="text" id="userMembershipId" class="form-control" @bind="userMembershipId" />
        <button class="btn btn-primary" @onclick="AddCheckIn">Bejelentkezés</button>
    </div>
    
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

<br />
@if (checkIns != null && checkIns.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Bejelentkezés dátuma</th>
                <th>Név</th>
                <th>CNP</th>
                <th>Bérlet megnevezés</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var checkIn in checkIns)
            {
                <tr>
                    <td>@checkIn.checkin_date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@checkIn.name</td>
                    <td>@checkIn.CNP</td>
                    <td>@checkIn.megnevezes</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}


@code {
    List<CheckIns> checkIns;
    string userMembershipId;
    string message;

    protected override async Task OnInitializedAsync()
    {
        checkIns = await checkInsService.GetAllEntries();
    }

    private async Task AddCheckIn()
    {
        if (!string.IsNullOrWhiteSpace(userMembershipId))
        {
            try
            {
                var userMembership = await userMembershipsService.GetEntryById(userMembershipId);
                if (userMembership != null)
                {
                    var checkIn = new CheckIns
                        {
                            name = userMembership.name,
                            CNP = userMembership.CNP,
                            membership_id = userMembership.membership_id,
                            user_membership_id = userMembership._id,
                            megnevezes = userMembership.megnevezes,
                            checkin_date = DateTime.Now
                        };

                    message = await checkInsService.CreateEntry(checkIn);
                    // await checkInsService.CreateEntry(checkIn);
                    await RefreshCheckIns();
                    userMembershipId = ""; 
                }
                else
                {
                    Console.WriteLine("A felhasználói bérlet nem található.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Hibás bejelentkezés: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Nincs felhasználói bérlet ID megadva.");
        }
    }

    private async Task RefreshCheckIns()
    {
        checkIns = await checkInsService.GetAllEntries();
        StateHasChanged();
    }
}
